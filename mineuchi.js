// Generated by CoffeeScript 1.6.3
(function() {
  var Yiai, colors, fs, jquery, jsdom, mkdirp, path, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require('fs');

  path = require('path');

  mkdirp = require('mkdirp');

  jsdom = require('jsdom');

  colors = require('colors');

  jquery = fs.readFileSync("./bower_components/jquery/jquery.min.js", "utf-8");

  _ = require('underscore');

  Yiai = (function() {
    function Yiai() {
      this.complete = __bind(this.complete, this);
      this.options = {};
      this.filelist = this.options.filelist || 'filelist.txt';
      this.dest = this.options.dest || "./dest";
      this.origin = this.options.origin || 'http://localhost:8080';
      this.initialize();
    }

    Yiai.prototype.initialize = function() {
      var lines,
        _this = this;
      lines = this.lineBy(this.filelist);
      return lines.forEach(function(path, index) {
        return jsdom.env({
          url: "" + _this.origin + path,
          src: [jquery],
          done: function(error, window) {
            return _this.complete(path, error, window);
          }
        });
      });
    };

    Yiai.prototype.complete = function(path, error, window) {
      var $, destpath, str;
      $ = window.$;
      str = $('#container').html();
      destpath = "" + this.dest + path;
      this.mkdir(destpath, error, "mkdir");
      return this.writeFile(destpath, str, error, "write");
    };

    Yiai.prototype.lineBy = function(filename, encoding) {
      var lines, str;
      encoding = encoding || 'utf8';
      str = fs.readFileSync(filename, encoding);
      lines = str.split(String.fromCharCode(10));
      return _.compact(lines);
    };

    Yiai.prototype.dirname = function(p) {
      if (path.extname(p) !== '') {
        p = path.dirname(p);
      }
      return p;
    };

    Yiai.prototype.reqfile = function(p) {
      if (/\/$/.test(p)) {
        p = "" + p + "index.html";
      }
      return p;
    };

    Yiai.prototype.mkdir = function(path, error, cmd) {
      mkdirp.sync(this.dirname(path));
      return this.log(error, cmd, path);
    };

    Yiai.prototype.writeFile = function(path, str, error, cmd) {
      path = this.reqfile(path);
      fs.writeFileSync(path, str, {
        flag: 'a'
      });
      return this.log(error, cmd, path);
    };

    Yiai.prototype.log = function(error, cmd, path) {
      var stat;
      stat = error ? "NG".red : "OK".green;
      return console.log("Yiai " + ("" + stat + " ") + ("" + cmd + " ").magenta + path);
    };

    return Yiai;

  })();

  new Yiai();

}).call(this);
